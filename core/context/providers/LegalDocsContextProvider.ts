/**
 * Context Provider –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∞–≤–¥–µ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ —Ç–æ–º–∞—Ö —É–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª
 */

import {
  ContextItem,
  ContextProviderDescription,
  ContextProviderExtras,
  ContextSubmenuItem,
  LoadSubmenuItemsArgs,
} from "../../index.js";
import { LegalDocsIndex } from "../../legal/LegalDocsIndex.js";
import {
  CourtDecisionConfig,
  CourtDecisionSearchQuery,
  LegalDocsConfig,
  LegalSearchQuery,
} from "../../legal/types.js";
import { BaseContextProvider } from "../index.js";

class LegalDocsContextProvider extends BaseContextProvider {
  static description: ContextProviderDescription = {
    title: "legal",
    displayTitle: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –î–æ–∫—É–º–µ–Ω—Ç—ã",
    description: "–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–º–∞–º —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–µ–ª–∞",
    type: "query",
    dependsOnIndexing: ["legal-docs" as any], // –ù–æ–≤—ã–π —Ç–∏–ø –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  };

  private legalIndex?: LegalDocsIndex;

  constructor(options: any) {
    super(options);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞
    const config: LegalDocsConfig = options?.config || this.getDefaultConfig();
    const courtDecisionConfig: CourtDecisionConfig =
      options?.courtDecisionConfig || this.getDefaultCourtDecisionConfig();

    if (config.enabled) {
      // TODO: –ü–æ–ª—É—á–∏—Ç—å multimodal –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      this.legalIndex = new LegalDocsIndex(
        options?.cacheDir || ".sdelay-starets/cache",
        config,
        courtDecisionConfig,
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private getDefaultConfig(): LegalDocsConfig {
    return {
      enabled: false,
      volumesDirectory: "./legal-volumes",
      indexing: {
        enableOcr: true,
        ocrLanguage: "rus",
        batchSize: 10,
        maxCacheSize: 50,
        backgroundIndexing: true,
      },
      search: {
        defaultResults: 5,
        enableReranking: true,
        contextPages: 3,
      },
      comparison: {
        suspiciousTextThreshold: 70,
        suspiciousVisualThreshold: 70,
        minMatchLength: 100,
      },
      performance: {
        parallelProcessing: 4,
      },
      multimodalModel: "MOZGACH108",
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private getDefaultCourtDecisionConfig(): CourtDecisionConfig {
    return {
      documentTypes: [
        "—Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞",
        "–ø—Ä–∏–≥–æ–≤–æ—Ä",
        "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "–∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "–∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
      ],
      keywords: [
        "—Å—É–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∏–ª",
        "—Å—É–¥ —Ä–µ—à–∏–ª",
        "—Å—É–¥ –æ–ø—Ä–µ–¥–µ–ª–∏–ª",
        "–ø—Ä–∏–≥–æ–≤–æ—Ä",
        "—Ä–µ—à–µ–Ω–∏–µ",
        "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "–∞–ø–µ–ª–ª—è—Ü–∏—è",
        "–∫–∞—Å—Å–∞—Ü–∏—è",
      ],
      searchStructure: {
        caseNumber: true,
        date: true,
        courtName: true,
        judge: true,
        parties: true,
        decision: true,
        reasoning: true,
      },
    };
  }

  async getContextItems(
    query: string,
    extras: ContextProviderExtras,
  ): Promise<ContextItem[]> {
    if (!this.legalIndex) {
      return [
        {
          name: "–û—à–∏–±–∫–∞",
          description: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
          content:
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º, –≤–∫–ª—é—á–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
        },
      ];
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞
      if (this.isCourtDecisionQuery(query)) {
        return await this.searchCourtDecisions(query);
      }

      // –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
      const searchQuery = this.parseQuery(query);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const results = await this.legalIndex.search(searchQuery);

      if (results.length === 0) {
        return [
          {
            name: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            description: `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`,
            content: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–º–∞ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.`,
          },
        ];
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      return results.map((result) => ({
        name: `–¢–æ–º ${result.volumeNumber}, —Å—Ç—Ä. ${result.pageNumber}`,
        description: `–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(result.relevance * 100).toFixed(0)}%`,
        content: this.formatResultContent(result, searchQuery),
        uri: {
          type: "file" as const,
          value: result.imagePath || "",
        },
      }));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:", error);
      return [
        {
          name: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
          description: String(error),
          content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${error}`,
        },
      ];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private parseQuery(query: string): LegalSearchQuery {
    // –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
    const volumeMatch = query.match(/—Ç–æ–º[:\s]+(\d+(?:[-,]\d+)*)/i);
    const pageMatch = query.match(/—Å—Ç—Ä–∞–Ω–∏—Ü[–∞—ã][:\s]+(\d+(?:[-,]\d+)*)/i);

    let volumeNumbers: number[] | undefined;
    if (volumeMatch) {
      volumeNumbers = this.parseNumberRange(volumeMatch[1]);
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      query = query.replace(volumeMatch[0], "").trim();
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    let searchType: "fulltext" | "semantic" | "multimodal" = "fulltext";

    if (query.includes("–ø–æ—Ö–æ–∂–∏–π") || query.includes("—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π")) {
      searchType = "semantic";
      query = query.replace(/–ø–æ—Ö–æ–∂–∏–π|—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π/gi, "").trim();
    }

    if (query.includes("–≤–∏–∑—É–∞–ª—å–Ω—ã–π") || query.includes("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")) {
      searchType = "multimodal";
      query = query.replace(/–≤–∏–∑—É–∞–ª—å–Ω—ã–π|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/gi, "").trim();
    }

    return {
      query: query.trim(),
      volumeNumbers,
      searchType,
      limit: 10,
      enableReranking: true,
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1-5,7,9")
   */
  private parseNumberRange(range: string): number[] {
    const numbers: number[] = [];
    const parts = range.split(",");

    for (const part of parts) {
      if (part.includes("-")) {
        const [start, end] = part.split("-").map(Number);
        for (let i = start; i <= end; i++) {
          numbers.push(i);
        }
      } else {
        numbers.push(Number(part));
      }
    }

    return numbers;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
   */
  private formatResultContent(result: any, query: LegalSearchQuery): string {
    let content = `# –¢–æ–º ${result.volumeNumber}, –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.pageNumber}\n\n`;
    content += `**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å**: ${(result.relevance * 100).toFixed(1)}%\n\n`;
    content += `---\n\n`;

    // –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    content += result.text;

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if (result.context) {
      content += `\n\n---\n\n### –ö–æ–Ω—Ç–µ–∫—Å—Ç\n\n${result.context}`;
    }

    return content;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é (—Å–ø–∏—Å–æ–∫ —Ç–æ–º–æ–≤)
   */
  async loadSubmenuItems(
    args: LoadSubmenuItemsArgs,
  ): Promise<ContextSubmenuItem[]> {
    if (!this.legalIndex) {
      return [];
    }

    try {
      const stats = await this.legalIndex.getCaseStatistics();

      const items: ContextSubmenuItem[] = [
        {
          id: "statistics",
          title: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ª–∞",
          description: `${stats.totalVolumes} —Ç–æ–º–æ–≤, ${stats.totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü`,
        },
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      if (stats.suspiciousComparisons > 0) {
        items.push({
          id: "suspicious",
          title: `‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (${stats.suspiciousComparisons})`,
          description: "–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ –∫–æ–ø–∏–ø–∞—Å—Ç–∞",
        });
      }

      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–º–æ–≤

      return items;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–º–µ–Ω—é:", error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–æ–º —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞
   */
  private isCourtDecisionQuery(query: string): boolean {
    const courtDecisionKeywords = [
      "—Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞",
      "–ø—Ä–∏–≥–æ–≤–æ—Ä",
      "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
      "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
      "–∞–ø–µ–ª–ª—è—Ü–∏—è",
      "–∫–∞—Å—Å–∞—Ü–∏—è",
      "—Å—É–¥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∏–ª",
      "—Å—É–¥ —Ä–µ—à–∏–ª",
      "—Å—É–¥ –æ–ø—Ä–µ–¥–µ–ª–∏–ª",
      "–Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ",
      "–ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è",
    ];

    const lowerQuery = query.toLowerCase();
    return courtDecisionKeywords.some((keyword) =>
      lowerQuery.includes(keyword),
    );
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞
   */
  private async searchCourtDecisions(query: string): Promise<ContextItem[]> {
    try {
      // –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞
      const courtDecisionQuery = this.parseCourtDecisionQuery(query);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const results =
        await this.legalIndex!.searchCourtDecisions(courtDecisionQuery);

      if (results.length === 0) {
        return [
          {
            name: "–†–µ—à–µ–Ω–∏—è —Å—É–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            description: `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`,
            content: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–º–∞ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.`,
          },
        ];
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      return results.map((result) => ({
        name: `${result.documentType} - –¢–æ–º ${result.volumeNumber}, —Å—Ç—Ä. ${result.pageNumber}`,
        description: `${result.courtName || "–°—É–¥"} - ${result.decisionDate ? result.decisionDate.toLocaleDateString() : "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"}`,
        content: this.formatCourtDecisionContent(result),
        uri: {
          type: "file" as const,
          value: result.imagePath || "",
        },
      }));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞:", error);
      return [
        {
          name: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞",
          description: String(error),
          content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞: ${error}`,
        },
      ];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π —Å—É–¥–∞
   */
  private parseCourtDecisionQuery(query: string): CourtDecisionSearchQuery {
    const lowerQuery = query.toLowerCase();

    // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞
    const caseNumberMatch = query.match(/–¥–µ–ª–æ[:\s]*‚Ññ?\s*(\d+[-\/]\d+)/i);
    const caseNumber = caseNumberMatch ? caseNumberMatch[1] : undefined;

    // –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–∞
    const courtNameMatch = query.match(/([–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+\s+—Å—É–¥)/i);
    const courtName = courtNameMatch ? courtNameMatch[1] : undefined;

    // –ü–æ–∏—Å–∫ —Å—É–¥—å–∏
    const judgeMatch = query.match(
      /—Å—É–¥—å—è[:\s]+([–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+)/i,
    );
    const judge = judgeMatch ? judgeMatch[1] : undefined;

    // –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    let documentType: string | undefined;
    if (lowerQuery.includes("–ø—Ä–∏–≥–æ–≤–æ—Ä")) documentType = "–ø—Ä–∏–≥–æ–≤–æ—Ä";
    else if (lowerQuery.includes("—Ä–µ—à–µ–Ω–∏–µ")) documentType = "—Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞";
    else if (lowerQuery.includes("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")) documentType = "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
    else if (lowerQuery.includes("–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"))
      documentType = "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ";

    // –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    let cleanQuery = query;
    if (caseNumberMatch)
      cleanQuery = cleanQuery.replace(caseNumberMatch[0], "").trim();
    if (courtNameMatch)
      cleanQuery = cleanQuery.replace(courtNameMatch[0], "").trim();
    if (judgeMatch) cleanQuery = cleanQuery.replace(judgeMatch[0], "").trim();

    return {
      query: cleanQuery.trim() || undefined,
      caseNumber,
      courtName,
      judge,
      documentType,
      limit: 10,
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–∞
   */
  private formatCourtDecisionContent(result: any): string {
    let content = `# ${result.documentType}\n\n`;

    if (result.caseNumber) {
      content += `**–ù–æ–º–µ—Ä –¥–µ–ª–∞**: ${result.caseNumber}\n`;
    }

    if (result.courtName) {
      content += `**–°—É–¥**: ${result.courtName}\n`;
    }

    if (result.judge) {
      content += `**–°—É–¥—å—è**: ${result.judge}\n`;
    }

    if (result.decisionDate) {
      content += `**–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è**: ${result.decisionDate.toLocaleDateString()}\n`;
    }

    if (result.parties) {
      content += `\n**–°—Ç–æ—Ä–æ–Ω—ã –¥–µ–ª–∞**:\n`;
      if (result.parties.plaintiff)
        content += `- –ü–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π/–ò—Å—Ç–µ—Ü: ${result.parties.plaintiff}\n`;
      if (result.parties.defendant)
        content += `- –ü–æ–¥—Å—É–¥–∏–º—ã–π/–û—Ç–≤–µ—Ç—á–∏–∫: ${result.parties.defendant}\n`;
      if (result.parties.prosecutor)
        content += `- –ü—Ä–æ–∫—É—Ä–æ—Ä: ${result.parties.prosecutor}\n`;
    }

    content += `\n**–¢–æ–º**: ${result.volumeNumber}, **–°—Ç—Ä–∞–Ω–∏—Ü–∞**: ${result.pageNumber}\n`;
    content += `**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å**: ${(result.relevance * 100).toFixed(1)}%\n\n`;
    content += `---\n\n`;

    if (result.decision) {
      content += `## –†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞\n\n${result.decision}\n\n`;
    }

    if (result.reasoning) {
      content += `## –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–æ—á–Ω–∞—è —á–∞—Å—Ç—å\n\n${result.reasoning}\n\n`;
    }

    content += `## –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n${result.fullText}`;

    return content;
  }
}

export default LegalDocsContextProvider;
